install.packages("scTenifoldNet")
install.packages("scTenifoldNet")
install.packages("scTenifoldNet")
install.packages("scTenifoldNet")
install.packages(c("foreign", "nlme"))
install.packages("scTenifoldNet")
dir()
dir()
#BiocManager::install('GSVA')
#install.packages('clustermole', dependencies = TRUE)
library(clustermole)
library(fgsea)
# Building the database for Mouse
CT <- clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[CT$db %in% c('CellMarker', 'PanglaoDB'),]
ctNames <- unique(CT$celltype)
CT <-lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# Creating a rank (is prefered to use the FC here)
gList <- sort(rnorm(length(gList)), decreasing = TRUE)
# Assigning the ID
names(gList) <- toupper(readLines('markers_of_cluster_1.txt'))
# Running the cell type assignation
E <- fgseaMultilevel(CT, gList)
# Sorting the result
E <- E[order(E$NES,1/E$padj, decreasing = TRUE),]
# Result
head(E)
library(fgsea)
install.packages('fgsea')
dir()
BiocManager::install('GSVA')
#BiocManager::install('GSVA')
#install.packages('clustermole', dependencies = TRUE)
library(fgsea)
library(clustermole)
# Building the database for Mouse
CT <- clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[CT$db %in% c('CellMarker', 'PanglaoDB'),]
ctNames <- unique(CT$celltype)
CT <-lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# Creating a rank (is prefered to use the FC here)
gList <- sort(rnorm(length(gList)), decreasing = TRUE)
# Assigning the ID
names(gList) <- toupper(readLines('markers_of_cluster_1.txt'))
# Running the cell type assignation
E <- fgseaMultilevel(CT, gList)
# Sorting the result
E <- E[order(E$NES,1/E$padj, decreasing = TRUE),]
# Result
head(E)
#BiocManager::install('GSVA')
#install.packages('clustermole', dependencies = TRUE)
library(fgsea)
library(clustermole)
# Building the database for Mouse
CT <- clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[CT$db %in% c('CellMarker', 'PanglaoDB'),]
ctNames <- unique(CT$celltype)
CT <-lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# Creating a rank (is prefered to use the FC here)
gList <- sort(rnorm(length(CT)), decreasing = TRUE)
# Assigning the ID
names(gList) <- toupper(readLines('markers_of_cluster_1.txt'))
# Running the cell type assignation
E <- fgseaMultilevel(CT, gList)
# Sorting the result
E <- E[order(E$NES,1/E$padj, decreasing = TRUE),]
# Result
head(E)
#BiocManager::install('GSVA')
#install.packages('clustermole', dependencies = TRUE)
library(clustermole)
library(fgsea)
# Building the database for Mouse
CT <- clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[CT$db %in% c('CellMarker', 'PanglaoDB'),]
ctNames <- unique(CT$celltype)
CT <-lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# Reading List
geneList <- toupper(readLines('markers_of_cluster_1.txt'))
# Creating a rank (is prefered to use the FC here)
gList <- sort(rnorm(length(geneList)), decreasing = TRUE)
# Assigning the ID
names(gList) <- geneList
# Running the cell type assignation
E <- fgseaMultilevel(CT, gList)
# Sorting the result
E <- E[order(E$NES,1/E$padj, decreasing = TRUE),]
# Result
head(E)
#BiocManager::install('GSVA')
#install.packages('clustermole', dependencies = TRUE)
library(clustermole)
library(fgsea)
# Building the database for Mouse
CT <- clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[CT$db %in% c('CellMarker', 'PanglaoDB'),]
ctNames <- unique(CT$celltype)
CT <-lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# Reading List
geneList <- toupper(readLines('markers_of_cluster_1.txt'))
# Creating a rank (is prefered to use the FC here)
gList <- sort(rnorm(length(geneList)), decreasing = TRUE)
# Assigning the ID
names(gList) <- geneList
# Running the cell type assignation
E <- fgseaMultilevel(CT, gList)
# Sorting the result
E <- E[order(E$NES,1/E$padj, decreasing = TRUE),]
# Result
head(E)
#BiocManager::install('GSVA')
#install.packages('clustermole', dependencies = TRUE)
library(clustermole)
library(fgsea)
# Building the database for Mouse
CT <- clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[CT$db %in% c('CellMarker', 'PanglaoDB'),]
ctNames <- unique(CT$celltype)
CT <-lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# Reading List
geneList <- toupper(readLines('markers_of_cluster_2.txt'))
# Creating a rank (is prefered to use the FC here)
gList <- sort(rnorm(length(geneList)), decreasing = TRUE)
# Assigning the ID
names(gList) <- geneList
# Running the cell type assignation
E <- fgseaMultilevel(CT, gList)
# Sorting the result
E <- E[order(E$NES,1/E$padj, decreasing = TRUE),]
# Result
head(E)
a<-head(E)
a
write.table(a,file="aaa.txt")
write.table(E,file="aaa.txt")
write.csv(E,file="aaa.txt")
write.csv2(E,file="aaa.txt")
write.ftable(E)
write.dcf(E)
write.dcf(E,file="aaa.txt")
typeof(E)
lapply(E, write, "test.txt", append=TRUE, ncolumns=1000)
lapply(E, write, "test.txt", append=TRUE)
write.list(E,file="aaa.txt")
lapply(E, function(x) write.table( data.frame(x), 'test.csv'  , append= T, sep=',' ))
summary(E)
E$pathway
E$pathway
E$size
write.csv(E$pathway,file="aaa.txt")
write.csv(E$pathway,file="aaa.txt",row.names = NULL)
write.csv(E$pathway,file="aaa.txt",row.names = NA)
write.csv(E$pathway,file="aaa.txt",row.names = FALSE)
write.csv(E,file="aaa.txt",row.names = FALSE)
write.csv(E,file='aaa.txt')
head(E)
write.csv(E,file='aaa.txt')
write.csv(E,file='aaa.txt')
#BiocManager::install('GSVA')
#install.packages('clustermole', dependencies = TRUE)
library(clustermole)
library(fgsea)
# Building the database for Mouse
CT <- clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[CT$db %in% c('CellMarker', 'PanglaoDB'),]
ctNames <- unique(CT$celltype)
CT <-lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# Reading List
geneList <- toupper(readLines('markers_of_cluster_2.txt'))
# Creating a rank (is prefered to use the FC here)
gList <- sort(rnorm(length(geneList)), decreasing = TRUE)
# Assigning the ID
names(gList) <- geneList
# Running the cell type assignation
E <- fgseaMultilevel(CT, gList)
# Sorting the result
E <- E[order(E$NES,1/E$padj, decreasing = TRUE),]
# Result
head(E)
write.csv(E,file='aaa.txt')
install.packages("enrichR")
library(enrichR)
dbs <- listEnrichrDbs()
head(dbs)
dbs
dbs <- c("GO_Molecular_Function_2015", "GO_Cellular_Component_2015", "GO_Biological_Process_2015")
enriched <- enrichr(c("Runx1", "Gfi1", "Gfi1b", "Spi1", "Gata1", "Kdr"), dbs)
enriched[["GO_Biological_Process_2015"]]
data(genes790)
length(genes790)
head(enrichr(genes790, c('LINCS_L1000_Chem_Pert_up'))[[1]])
getEnrichr()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("MAST")
library(MAST)
browseVignettes("MAST")
library(MAST)
install.packages(c("data.table", "Rcpp", "rlang", "tibble", "vctrs"))
library(Seurat)
install.packages('Seurat')
library('Seurat')
library('Seurat')
exit()
quit()
library(devtools)
install_github("immunogenomics/harmony")
library(devtools)
install_github("immunogenomics/harmony")
library(devtools)
install_github("immunogenomics/harmony")
install.packages(c("bit", "bit64", "data.table", "dplyr", "fs", "Rcpp", "tibble", "tidyr"))
library(devtools)
install_github("immunogenomics/harmony")
library(harmony")
;
""
library(harmony)
data(cell_lines)
cell_lines$meta_data
V <- cell_lines$scaled_pcs
meta_data <- cell_lines$meta_data
p1 <- do_scatter(V, meta_data, 'dataset') +
labs(title = 'Colored by dataset')
p2 <- do_scatter(V, meta_data, 'cell_type') +
labs(title = 'Colored by cell type')
vignette("BUSseq_user_guide",package="BUSseq")
library(BUSseq)
CountData <- BUSseqfits_example$CountData_raw
BUSseqfits_res <- BUSseq_MCMC(ObservedData = CountData, n.celltypes = 4, n.iterations = 500, working_dir = ".", showIteration = TRUE, seed = 123)
corrected_countdata <- corrected_read_counts(BUSseqfits_res)
class(corrected_countdata)
class(CountData)
class(corrected_countdata[[1]])
corrected_countdata[[1]]
CountData[[1]]
corrected_countdata[[2]]
CountData[[1]]-corrected_countdata[[1]]
setwd("E:\\GitHub\\scGEAToolbox\\thirdparty\\R_BUSseq")
library(BUSseq)
X0 <- read.csv("input0.csv", header = FALSE)
X1 <- read.csv("input1.csv", header = FALSE)
class(X0)
library(BUSseq)
X0 <- read.csv("input0.csv", header = FALSE)
X1 <- as.matrix(read.csv("input1.csv", header = FALSE))
class(X0)
class(X1)
X0 <- as.matrix(read.csv("input0.csv", header = FALSE))
X1 <- as.matrix(read.csv("input1.csv", header = FALSE))
CountData<-list(X0,X1)
class(CountData)
class(CountData[[1]])
class(CountData[[2]])
class(CountData[[0]])
BUSseqfits_res <- BUSseq_MCMC(ObservedData = CountData, n.celltypes = 4, n.iterations = 500, working_dir = ".", showIteration = TRUE, seed = 123)
